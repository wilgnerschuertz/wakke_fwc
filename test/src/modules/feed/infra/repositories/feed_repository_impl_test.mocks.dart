// Mocks generated by Mockito 5.3.0 from annotations
// in wakke_fwc/test/src/modules/feed/infra/repositories/feed_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes, must_be_immutable
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:wakke_fwc/src/modules/feed/infra/datasource/feed_datasource.dart'
    as _i2;
import 'package:wakke_fwc/src/modules/feed/infra/models/feed_model.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [FeedDatasource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedDatasource extends _i1.Mock implements _i2.FeedDatasource {
  MockFeedDatasource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.FeedModel>> getFeeds() => (super.noSuchMethod(
          Invocation.method(#getFeeds, []),
          returnValue: _i3.Future<List<_i4.FeedModel>>.value(<_i4.FeedModel>[]))
      as _i3.Future<List<_i4.FeedModel>>);
}

/// A class which mocks [FeedModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockFeedModel extends _i1.Mock implements _i4.FeedModel {
  MockFeedModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  bool get private =>
      (super.noSuchMethod(Invocation.getter(#private), returnValue: false)
          as bool);
  @override
  List<Object> get props =>
      (super.noSuchMethod(Invocation.getter(#props), returnValue: <Object>[])
          as List<Object>);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
